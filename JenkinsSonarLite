def artifactname = "devops-snow-build-app.jar"   
def repoName = "JenkinsDevOpsProject" 
def pipelineName = "SunilPipelines/Sunil-Scripted-Pipeline-Sonar"  
def semanticVersion = "${env.BUILD_NUMBER}.0.0" 
def packageName = "devops-snow-build-pkg_${env.BUILD_NUMBER}" 
def version = "${env.BUILD_NUMBER}.0"
def pkgName = "devops-snow-build-pkg_${env.BUILD_NUMBER}"
def changeRequestNumber = "null"   
def buildNo = "${env.BUILD_NUMBER}"
def currStageName = "none"    

pipeline {
    agent any
    tools {
        maven 'Maven'
    }

    environment {
        SCANNER_HOME = tool 'sonarScanner'
        //jdk 'JDK17' 
       
    }

    stages {
        stage('Build') {
            steps {
               // sh 'mvn -B clean package -DskipTests'
               echo 'Build'
                snDevOpsArtifact(artifactsPayload: """{
                        "artifacts": [{
                            "name": "${artifactname}", 
                            "version": "1.${env.BUILD_NUMBER}",
                            "semanticVersion": "1.${env.BUILD_NUMBER}.0",
                            "repositoryName": "${repoName}"
                        }],
                        "branchName": "main"
                    }""")
                   snDevOpsPackage(name: "${pkgName}-${env.BUILD_NUMBER}", artifactsPayload: """{
                        "artifacts": [{
                            "name": "${artifactname}",
                            "version": "1.${env.BUILD_NUMBER}",
                            "repositoryName": "${repoName}"
                        }],
                        "branchName": "main"
                    }""")
                 snDevOpsChange(
                        changeRequestDetails: '{ "attributes": {"chg_model": "adffaa9e4370211072b7f6be5bb8f2ed"}, "autoCloseChange": true}',
                        changeStepTimeOut: 18000,
                        pollingInterval: 60
                    )
            }
        }

     // stage('Test') {
//     steps {
//         // Run tests but donâ€™t fail if none exist
//         sh 'mvn test || true'
//     }
//     post {
//         always {
//             // collect all test reports (if they exist)
//             junit testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true
//         }
//     }
// }


       /* stage('Security') {
            steps {
                script {
                   snDevOpsSecurityResult securityResultAttributes: "{'scanner': 'Veracode','applicationName': 'PetStoreAPI-Github','securityToolId':'1cefeca547c8b210f31f6c6b416d43bb'}"
                }
            }
        }*/

       /* stage('SonarQube Analysis') {
            steps {
                script {
                    sonarSummaries()
                }
            }
        }*/
    }
}

def sonarSummaries() {
    withSonarQubeEnv('automationsonar') {
        if (fileExists("sonar-project.properties")) {
            sh "${SCANNER_HOME}/bin/sonar-scanner"
        } else {
            sh """
                mvn clean verify sonar:sonar \
                  -Dsonar.login=1ff462f03228674e3a684569d716aad1aff286bb \
                  -Dsonar.host.url=https://sonarcloud.io \
                  -Dsonar.organization=devsystem2019 \
                  -Dsonar.projectKey=devsystem2019_GitHubActionsTest
            """
        }
    }
    // Optional: Wait for quality gate
    // timeout(time: 1, unit: 'MINUTES') {
    //     waitForQualityGate abortPipeline: false
    // }
}
